{"version":3,"sources":["app.module.js","class/class.module.js","user/user.module.js","class/class.controller.js","class/class.routes.js","class/first-time-controller.js","core/app.routes.js","core/materialTheme.config.js","core/passwordCheck.directive.js","pages/home.controller.js","user/login.factory.js","user/sign.controller.js","user/user.factory.js","user/username.directive.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChhfile":"app.js","sourcesContent":["(function(){\n    'use strick';\n\n    angular.module('app', [\n        'ngMaterial',\n        'ngMessages',\n        'ngAnimate',\n        'ui.router',\n        'app.user',\n        'app.class'\n    ])\n    .value('variables', {\n        \"urlApi\": 'http://localhost/sweep-manager/src/API',\n    });\n\n})();\n","(function(){\n    'use strict';\n    \n    angular\n        .module('app.class', [\n            'ui.router',\n            'app.user'\n        ])\n})();\n","(function(){\n    'use strict';\n    \n    angular\n        .module('app.user', [\n            'ui.router'\n        ])\n})();","(function () {\n    'use strict';\n\n    angular\n        .module('app.class')\n        .controller('ClassController', ClassController);\n\n    ClassController.$inject = ['loginFactory', 'userFactory', '$mdDialog', 'orderByFilter', '$state'];\n\n    function ClassController(loginFactory, userFactory, $mdDialog, orderByFilter, $state) {\n        var vm = this;\n        vm.className = loginFactory.getUser().user_class;\n        vm.editStudants = editStudants;\n        vm.editStudantDialog = editStudantDialog;\n        vm.exit = exit;\n        vm.newStudantDialog = newStudantDialog;\n        vm.notSelected = notSelected;\n        vm.removeStudant = removeStudant;\n        vm.someoneStudant = someoneStudant;\n        vm.studants = orderStudants(loginFactory.getUser().studants);\n        vm.sweep = sweep;\n        vm.toggleSelecteds = toggleSelecteds;\n\n\n        vm.$onInit = function () {\n            if (!vm.studants) {\n                vm.studants = [];\n            }\n        }\n\n        /* Private */\n        function exit() {\n            $state.go('home');\n        }\n\n        function convertSelectsStudants(selecteds) {\n            var studantsKeys = [];\n            for (var key in selecteds) {\n                if (selecteds[key]) {\n                    studantsKeys.push(new Number(key));\n                }\n            }\n            var studantsSelects = [];\n            for (var key in studantsKeys) {\n                studantsSelects.push(vm.studants[studantsKeys[key]]);\n            }\n            return studantsSelects;\n        }\n\n        function orderStudants(studants) {\n            studants = angular.forEach(studants, function (studant) {\n                studant.times = new Number(studant.times);\n            });\n            return orderByFilter(studants, ['times', 'name']);\n        }\n\n        function objectToArray(object) {\n            var array = [];\n            angular.forEach(object, function (item) {\n                array.push(item);\n            });\n            return array;\n        }\n\n        /* Publics */\n        function editStudantDialog($event, studants, callback) {\n            var body = angular.element(document.body);\n            $mdDialog.show({\n                parent: body,\n                targetEvent: $event,\n                templateUrl: 'app/class/edit-studant-dialog.html',\n                locals: {\n                    editStudants: angular.copy(studants),\n                    callback: callback\n                },\n                controller: EditStudantDialogController,\n                controllerAs: 'vm'\n            });\n\n            EditStudantDialogController.$inject = ['editStudants', 'callback', '$mdDialog', 'userFactory'];\n\n            function EditStudantDialogController(editStudants, callback, $mdDialog, userFactory) {\n                var vm = this;\n                vm.close = close;\n                vm.editStudants = editStudants;\n                vm.callbackEditStudant = callback;\n                vm.studants = angular.copy(convertSelectsStudants(studants));\n\n                function close() {\n                    $mdDialog.hide();\n                }\n\n                function editStudants(editStudants, callback) {\n\n                    userFactory.editStudants(editStudants).then(function (result) {\n                        callback(editStudants);\n                    });\n                }\n\n            }\n\n        }\n\n        /* Publics */\n        function editStudants(studants) {\n            vm.studants = vm.studants.map(function (studant) {\n                studants.forEach(function (editStudant) {\n                    if (editStudant.id == studant.id) {\n                        studant = editStudant;\n                    }\n                });\n                return studant;\n            });\n            $mdDialog.hide();\n        }\n\n        function notSelected(swepper, value) {\n            return swepper != value;\n        }\n\n        function newStudantDialog(event) {\n            var confirm = $mdDialog.prompt()\n                .title('Cadastro')\n                .textContent('Preencha o campo abaixo para cadastrar um aluno.')\n                .placeholder('Aluno')\n                .ariaLabel('Aluno')\n                .targetEvent(event)\n                .ok('Adicionar')\n                .cancel('Cancelar');\n\n            $mdDialog.show(confirm).then(function (result) {\n                var data = {\n                    class: loginFactory.getUser().user_id,\n                    name: result\n                };\n                userFactory.createStudant(data).then(function (result) {\n                    var studant = result.data;\n                    vm.studants.push({\n                        id: studant.studant_id,\n                        name: studant.studant_name,\n                        times: studant.studant_times,\n                    });\n                    vm.studants = orderStudants(vm.studants);\n                });\n            });\n        };\n\n        function removeStudant(studants) {\n            var studantsSelects = convertSelectsStudants(studants);\n            userFactory.removeStudants(studantsSelects).then(function () {\n                vm.studants = vm.studants.filter(function (studant) {\n                    angular.copy({}, studants);\n                    return studantsSelects.indexOf(studant) == -1;\n                });\n            });\n        }\n\n        function someoneStudant(studants) {\n            studants = objectToArray(studants);\n            return studants && studants.indexOf(true) != -1;\n        }\n\n        function sweep(studants) {\n            userFactory.sweep(studants);\n            studants = objectToArray(studants);\n            vm.studants = vm.studants.map(function (studant) {\n                if (studants.indexOf(studant) != -1) {\n                    studant.times++;\n                    return studant;\n                }\n                return studant;\n            });\n            vm.studants = orderStudants(vm.studants);\n        }\n\n        function toggleSelecteds(studants, selected) {\n            if (selected) {\n                angular.copy({}, studants);\n            } else {\n                var i = 0;\n                var newSelect = {};\n                angular.forEach(vm.studants, function (studant) {\n                    newSelect[i++] = true;\n                });\n                angular.copy(newSelect, studants);\n            }\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('app.class')\n        .config(routes)\n\n        routes.$inject = ['$stateProvider'];\n        function routes($stateProvider){\n            $stateProvider\n                .state('class', {\n                    url: '/turma',\n                    templateUrl: 'app/class/class.html',\n                    controller: 'ClassController',\n                    controllerAs: 'vm',\n                    onEnter: ['$state', 'loginFactory',function($state, loginFactory){\n                        if(loginFactory.getUser() == {}) $state.go(\"home\");\n                        if(!loginFactory.getUser().user_id) $state.go(\"home\");\n                        if(!loginFactory.getUser().user_class) $state.go(\"firstTime\");\n                    }]\n                })\n                .state('firstTime', {\n                    url: '/turma/primeiravisita',\n                    templateUrl: 'app/class/first-time.html',\n                    controller: 'FirstTimeController',\n                    controllerAs: 'vm',\n                    onEnter: ['$state', 'loginFactory',function($state, loginFactory){\n                        if(loginFactory.getUser() == {}) $state.go(\"home\");\n                        if(!loginFactory.getUser().user_id) $state.go(\"home\");\n                        if(loginFactory.getUser().user_class) $state.go(\"class\");\n                    }]\n                })\n        }\n\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('app.class')\n        .controller('FirstTimeController', FirstTimeController);\n\n    FirstTimeController.$inject = ['userFactory', 'loginFactory', '$state'];\n\n    function FirstTimeController(userFactory, loginFactory, $state) {\n        var vm = this;\n        vm.setClass = setClass;\n\n        function setClass(className) {\n            var data = {\n                className: className\n            }\n            userFactory.defineClassName(data);\n            loginFactory.getUser().user_class = className;\n            $state.go('class');\n        }\n    }\n})();\n","(function(){\n    'use strick';\n\n    angular\n        .module('app')\n        .config(routes)\n    \n    routes.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\n    function routes ($locationProvider, $stateProvider, $urlRouterProvider) {\n        $stateProvider\n            .state({\n                name: 'home',\n                url: '/',\n                controller: \"homeController\",\n                controllerAs: \"homeVm\",\n                templateUrl: \"app/pages/home.html\" \n            });\n        $urlRouterProvider.otherwise('/');\n    }\n    \n})();","(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .config(materialTheme)\n\n    materialTheme.$inject = ['$mdThemingProvider'];\n\n    function materialTheme($mdThemingProvider) {\n        $mdThemingProvider\n            .theme('default')\n            .primaryPalette('teal')\n            .accentPalette('indigo');\n    };\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('app')\n        .directive('passwordCheck', passwordCheck);\n\n    passwordCheck.$inject = [];\n\n    /* @ngInject */\n    function passwordCheck() {\n        var directive = {\n            require: 'ngModel',\n            link: link,\n            restrict: 'A',\n            scope: {\n                passwordCheck: \"=passwordCheck\"\n            },\n        };\n        return directive;\n\n        function link(scope, element, attrs, controller) {\n            controller.$validators.passwordCheck = function (modelValue, viewValue) {\n                return scope.passwordCheck === modelValue;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('app')\n        .controller('homeController', homeController);\n\n    homeController.$inject = ['$state','loginFactory', 'userFactory'];\n    function homeController($state, loginFactory, userFactory){\n        var vm = this;            \n        \n        //Variables\n        vm.signin = {};\n        vm.isUserAvailability = 1;\n        vm.userAction = 'login';  \n        \n        //Functions\n        vm.isAction = isAction;\n        vm.setAction = setAction;\n        vm.userCreated = userCreated;\n        vm.userLogged = userLogged;\n        \n        //Publics\n        function isAction(action){\n            return vm.userAction === action;\n        }\n        \n        function setAction(action){\n            vm.userAction = action;\n        }\n        \n        function userCreated(user){\n            userFactory.login(user).then(function(result){\n                userLogged(result.data);\n            });\n        }\n\n        function userLogged(){\n            $state.go(\"class\");\n        }\n        \n    }\n})();\n","(function(){\n    'use strict';\n    \n    angular\n        .module('app.user')\n        .factory('loginFactory', loginFactory);\n    \n    loginFactory.$inject = [];\n    function loginFactory(){\n        var user = false;\n        \n        var service = {\n            getUser: getUser,\n            setUser: setUser,\n            cleanUser: cleanUser\n        }\n        return service;\n        \n        function getUser(){\n            return user;\n        }\n        \n        function setUser(newUser){\n            user = newUser;\n        }\n        \n        function cleanUser(){\n            setUser(false);\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('app.user')\n        .controller('SignController', SignController);\n\n    SignController.$inject = ['$rootScope', '$scope','userFactory', 'loginFactory'];\n    function SignController($rootScope, $scope, userFactory, loginFactory){\n        var vm = this;        \n        vm.create = create;\n        vm.login = login;\n        vm.logout = logout;\n        \n        function create(user, form, success, error){\n            var userData = angular.copy(user);\n            angular.copy({}, user)\n            userFactory.create(userData).then(function(result){\n                if($scope[form]){ \n                    $scope[form].$setUntouched();\n                    $scope[form].$setPristine();\n                }\n                success(userData);\n            });\n        }\n        \n        function login(user, form, success, error){\n            var userData = angular.copy(user);\n            angular.copy({}, user)\n            userFactory.login(userData).then(function(result){\n                if(result.data){\n                    if($scope[form]){ \n                        $scope[form].$setUntouched();\n                        $scope[form].$setPristine();\n                    }\n                    loginFactory.setUser(result.data);\n                    success(result.data);\n                }\n            });\n        }\n\n        function logout(callback){\n            loginFactory.cleanUser();\n            callback();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n    angular\n        .module('app.user')\n        .service('userFactory', userFactory);\n\n    userFactory.$inject = ['$http', 'variables', '$location', 'loginFactory'];\n\n    function userFactory($http, variables, $location, loginFactory) {\n        var fileApi = \"user.php\";\n\n        var service = {\n            checkAvailability: checkAvailability,\n            create: create,\n            createStudant: createStudant,\n            editStudants: editStudants,\n            defineClassName: defineClassName,\n            login: login,\n            removeStudants: removeStudants,\n            sweep: sweep\n        }\n        return service;\n\n        function checkAvailability(username) {\n            var data = {};\n            data.action = \"checkAvailability\";\n            data.username = username || \"\";\n            return $http.post(variables.urlApi + '/user', data);\n        };\n\n        function create(data) {\n            data.action = \"create\";\n            return $http.post(variables.urlApi + '/user', data);\n        };\n\n        function createStudant(data){\n            data.action = \"createStudant\";\n            return $http.post(variables.urlApi + '/user', data);\n        }\n\n        function editStudants(studants){\n            var data = {\n                action: 'editStudants',\n                studants: studants\n            };\n            return $http.post(variables.urlApi + '/user', data);\n        }\n\n        function defineClassName(data) {\n            data.action = \"defineClass\";\n            data.id = loginFactory.getUser().user_id;\n            return $http.post(variables.urlApi + '/user', data);\n        }\n\n        function login(data) {\n            data.action = \"login\";\n            return $http.post(variables.urlApi + '/user', data);\n        };\n\n        function removeStudants(studants){\n            var data = {\n                studants: studants,\n                action: \"removeStudant\"\n            };\n            return $http.post(variables.urlApi + '/user', data);\n        }\n\n        function sweep(studants) {\n            var data = {};\n            data.action = \"sweep\";\n            data.studants = studants;\n            return $http.post(variables.urlApi + '/user', data);\n        };\n\n\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('app.user')\n        .directive('username', username);\n\n    username.$inject = ['userFactory', '$timeout', '$q'];\n\n    function username(userFactory, $timeout, $q) {\n        var directive = {\n            require: 'ngModel',\n            link: link,\n            restrict: 'A',\n        };\n        return directive;\n\n        function link(scope, element, attrs, controller) {\n            controller.$asyncValidators.username = function (modelValue, viewValue) {\n                \n                var defer = $q.defer();\n                \n                userFactory.checkAvailability(modelValue).then(function (result) {\n                    if(result.data){\n                        defer.resolve();\n                    }else{\n                        defer.reject();\n                    }\n                })\n                \n                return defer.promise;\n            };\n        }\n    }\n})();\n"]}